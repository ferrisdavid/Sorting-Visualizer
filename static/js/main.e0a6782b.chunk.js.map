{"version":3,"sources":["sortingAlgorithms/BubbleSort.js","sortingAlgorithms/QuickSort.js","sortingAlgorithms/MergeSort.js","sortingAlgorithms/InsertionSort.js","sortingVisualizer/sortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["getBubbleSortAnimations","array","animations","i","length","j","push","temp","getQuickSortAnimations","QuickSort","leftIndex","rightIndex","pivot","Math","floor","pivotIndex","splitIndex","left","right","pivotInd","swap","split","arr","getMergeSortAnimations","auxArray","slice","mergeSort","mainArr","start","end","middleIndex","rightEnd","leftEnd","tempLeft","mergeHelper","getInsertionSortAnimations","value","InsertionSort","SortingVisualizer","state","size","barWidth","window","innerHeight","innerWidth","AnimationSpeed","generateArray","randomVal","getRandomVal","setState","handleIncrease","newSize","document","getElementById","difference","auxillaryArray","newarr","bubbleSort","handleDisable","ArrayBars","getElementsByClassName","color","barOneId","barTwoId","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","height","quickSort","pivotBarId","pivotBarStyle","this","a1","a2","random","className","variant","expand","id","type","min","max","defaultValue","onChange","onClick","map","key","width","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e0a6782b.chunk.js","sourcesContent":["export function getBubbleSortAnimations(array){\r\n    let animations = [];\r\n    for(let i = 0; i < array.length - 1;i++ ){\r\n        for(let j =0; j < array.length-1-i;j++){\r\n            animations.push([j,j+1,\"green\"]);\r\n            if(array[j] > array[j+1]){\r\n                animations.push([j,j+1,\"red\"]);\r\n                animations.push([j,array[j+1]]);\r\n                animations.push([j+1,array[j]]);\r\n                animations.push([j,j+1,\"green\"]);\r\n                let temp = array[j];\r\n                array[j] = array[j+1];\r\n                array[j+1] = temp;\r\n            }\r\n            animations.push([j,j+1,\"pink\"]);\r\n             \r\n\r\n            \r\n        }\r\n    }\r\n    return animations;\r\n}\r\n","export function getQuickSortAnimations(array){\r\n    let animations=[];\r\n    QuickSort(array,0, array.length-1,animations);\r\n    return animations;\r\n}\r\n\r\nfunction QuickSort(array,leftIndex, rightIndex, animations){\r\n    if(leftIndex >= rightIndex){\r\n        return;\r\n    }\r\n    let pivot = array[Math.floor((leftIndex+rightIndex)/2)];\r\n    let pivotIndex = Math.floor((leftIndex+rightIndex)/2);\r\n    let splitIndex = split(array, leftIndex, rightIndex, pivot, pivotIndex, animations);\r\n    QuickSort(array, leftIndex, splitIndex-1, animations);\r\n    QuickSort(array, splitIndex, rightIndex,animations);\r\n}\r\n//Work On\r\nfunction split(array, left, right, pivot, pivotInd, animations){\r\n    animations.push([pivotInd,\"yellow\"]);\r\n    while(left <= right){\r\n        //Maybe push animation at start\r\n        animations.push([left,\"green\"]);\r\n        animations.push([right,\"green\"]);\r\n        while(array[left] < pivot){\r\n            animations.push([left,\"green\"]);\r\n            animations.push([left,\"pink\"]);\r\n            left++;\r\n            if(array[left] >= pivot){\r\n                animations.push([left,\"green\"]);\r\n            }\r\n        }\r\n        while(array[right] > pivot){\r\n            animations.push([right,\"green\"]);\r\n            animations.push([right,\"pink\"]);\r\n            right--;\r\n            if(array[right] <= pivot){\r\n                animations.push([right,\"green\"]);\r\n            }\r\n        }\r\n        if(left<=right){\r\n            animations.push([left,right,\"red\"]);\r\n            animations.push([left,array[right]]);\r\n            animations.push([right,array[left]]);\r\n            animations.push([left,right,\"green\"]);\r\n            swap(array,left,right);\r\n            animations.push([left,right,\"pink\"]);\r\n            if(left === pivotInd || right === pivotInd){\r\n                animations.push([pivotInd,\"yellow\"]);\r\n            }\r\n            left++;\r\n            right--;\r\n        }\r\n        else{\r\n            animations.push([left,right,\"green\"]);\r\n            animations.push([left,right,\"pink\"]);\r\n        }\r\n    }\r\n    animations.push([pivotInd,\"pink\"]);\r\n    return left;\r\n}\r\n\r\nfunction swap(arr, i, j){\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","export function getMergeSortAnimations(array){\r\n    const animations = [];\r\n    const auxArray = array.slice();\r\n    mergeSort(array, 0 , array.length-1, auxArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSort(mainArr, start, end, auxArray, animations){\r\n    if(start >= end){\r\n        return;\r\n    }\r\n    const middleIndex = Math.floor((start+end)/2);\r\n    mergeSort(auxArray, start, middleIndex,mainArr, animations);\r\n    mergeSort(auxArray,middleIndex+1,end,mainArr,animations);\r\n    mergeHelper(auxArray,start,middleIndex,end,mainArr,animations);\r\n    \r\n}\r\n\r\nfunction mergeHelper(mainArr, leftIndex, middleIndex, rightEnd, auxArray, animations){\r\n    let leftEnd = middleIndex;\r\n    let rightStart = middleIndex + 1;\r\n    \r\n    let left = leftIndex;\r\n    let tempLeft = leftIndex;\r\n    let right = rightStart\r\n\r\n    while(left <= leftEnd && right <= rightEnd){\r\n        if(auxArray[left] <= auxArray[right]){\r\n            animations.push([tempLeft,right,\"green\"]);\r\n            animations.push([tempLeft, auxArray[left]]);\r\n            animations.push([tempLeft,right,\"pink\"]);\r\n            mainArr[tempLeft++] = auxArray[left++];\r\n        }\r\n        else{\r\n            animations.push([tempLeft, right,\"red\"]);\r\n            animations.push([tempLeft, auxArray[right]]);\r\n            animations.push([tempLeft, right,\"green\"]);\r\n            animations.push([tempLeft, right,\"pink\"]);\r\n            mainArr[tempLeft++] = auxArray[right++];\r\n        }\r\n    }\r\n    while(left <= leftEnd){\r\n        animations.push([left,left,\"green\"]);\r\n        animations.push([tempLeft, auxArray[left]]);\r\n        animations.push([left,left, \"pink\"]);\r\n        mainArr[tempLeft++] = auxArray[left++];\r\n    }\r\n    while(right <= rightEnd){\r\n        animations.push([right,right,\"green\"]);\r\n        animations.push([tempLeft, auxArray[right]]);\r\n        animations.push([right,right, \"pink\"]);\r\n        mainArr[tempLeft++] = auxArray[right++];\r\n    }\r\n}","export function getInsertionSortAnimations(array){\r\n    let animations = [];\r\n    InsertionSort(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction InsertionSort(arr, animations){\r\n    for(let i =1; i < arr.length; i++){\r\n        let value = arr[i];\r\n        let j = i-1;\r\n        while(j >= 0 && arr[j] > value){\r\n            animations.push([j,j+1,\"red\"]);\r\n            animations.push([j+1,arr[j]]);\r\n            animations.push([j,j+1,\"green\"]);\r\n            animations.push([j,j+1,\"pink\"]);\r\n            arr[j+1] = arr[j];   \r\n            j--;\r\n        }\r\n\r\n        if(j>=0){\r\n            animations.push([j,j+1,\"red\"]);\r\n            animations.push([j+1,value]);\r\n            animations.push([j,j+1,\"green\"]);\r\n            animations.push([j,j+1,\"pink\"]);\r\n        }\r\n        animations.push([j+1,value]);\r\n        arr[j+1] = value;    \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './sortingVisualizer.css';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/BubbleSort';\r\nimport './toolbar.css';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/QuickSort';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/MergeSort';\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/InsertionSort';\r\n\r\nclass SortingVisualizer extends Component {\r\n    state = { array: [],\r\n              size: 50,\r\n              barWidth: window.innerHeight*window.innerWidth/(50*2000),\r\n              AnimationSpeed: 3,  \r\n            }\r\n    \r\n    componentDidMount(){\r\n        this.generateArray();\r\n    }\r\n\r\n     generateArray = () =>{\r\n        let array = [];\r\n        let size = this.state.size;\r\n        for(let i = 0; i <size; i++){\r\n            let randomVal = this.getRandomVal();\r\n            array.push(randomVal);\r\n\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    handleIncrease = () =>{\r\n        let newSize = document.getElementById(\"sizeSlider\").value;\r\n        if(newSize > 80){\r\n            this.setState({ AnimationSpeed: 1.25 });\r\n        }\r\n        else if(newSize > 40){\r\n            this.setState({ AnimationSpeed: 4 });\r\n        }\r\n        else{\r\n            this.setState({ AnimationSpeed: 10 });\r\n        }\r\n        this.setState({size: newSize });\r\n        let difference = this.state.size - this.state.array.length;\r\n        let auxillaryArray = this.state.array.slice();\r\n        if(difference > 0){\r\n            for(let i = 0; i < difference; i++){\r\n                auxillaryArray.push(this.getRandomVal());\r\n            }\r\n            this.setState({ array: auxillaryArray});\r\n        }\r\n        else if(difference < 0){\r\n            let newarr =auxillaryArray.slice(0,auxillaryArray.length + difference-1);\r\n            this.setState({ array: newarr});\r\n        }\r\n        this.setState({ barWidth: window.innerHeight*window.innerWidth/(this.state.size*2000)})\r\n    }\r\n\r\n    bubbleSort = () => {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        const {AnimationSpeed} = this.state;\r\n        this.handleDisable();\r\n        for(let i =0; i < animations.length; i++){\r\n            const ArrayBars = document.getElementsByClassName(\"bar\");\r\n            if(animations[i].length === 3){\r\n                const color = animations[i][2];\r\n                const barOneId = animations[i][0];\r\n                const barTwoId = animations[i][1];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                const barTwoStyle = ArrayBars[barTwoId].style; \r\n                setTimeout(()=>{\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i*AnimationSpeed);\r\n            }\r\n            else{\r\n                const[barOneId, height] = animations[i];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                setTimeout(()=>{\r\n                    barOneStyle.height = `${height}px`;\r\n                },i*AnimationSpeed);\r\n            } \r\n        }\r\n    }\r\n\r\n\r\n\r\n    quickSort = () =>{\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        const {AnimationSpeed} = this.state;\r\n        for(let i  = 0; i < animations.length; i++){\r\n            const ArrayBars = document.getElementsByClassName(\"bar\");\r\n            if(animations[i].length === 3){\r\n                const color = animations[i][2];\r\n                const barOneId = animations[i][0];\r\n                const barTwoId = animations[i][1];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                const barTwoStyle = ArrayBars[barTwoId].style; \r\n                setTimeout(()=>{\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i*AnimationSpeed);\r\n            }\r\n            else if(typeof animations[i][1]===\"string\"){\r\n                const color = animations[i][1];\r\n                const pivotBarId = animations[i][0];\r\n                const pivotBarStyle = ArrayBars[pivotBarId].style;\r\n                setTimeout(()=>{\r\n                    pivotBarStyle.backgroundColor = color;\r\n                }, i*AnimationSpeed);\r\n            }\r\n            else{\r\n                const[barOneId, height] = animations[i];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                setTimeout(()=>{\r\n                    barOneStyle.height = `${height}px`;\r\n                },i*AnimationSpeed);\r\n            }\r\n        }\r\n    }\r\n\r\n    mergeSort=()=>{\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        const {AnimationSpeed} = this.state;\r\n        for(let i = 0; i < animations.length; i++){\r\n            const ArrayBars = document.getElementsByClassName(\"bar\");\r\n            if(animations[i].length === 3){\r\n                const color = animations[i][2];\r\n                const barOneId = animations[i][0];\r\n                const barTwoId = animations[i][1];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                const barTwoStyle = ArrayBars[barTwoId].style; \r\n                setTimeout(()=>{\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i*AnimationSpeed);\r\n            }\r\n            else{\r\n                const[barOneId, height] = animations[i];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                setTimeout(()=>{\r\n                    barOneStyle.height = `${height}px`;\r\n                },i*AnimationSpeed);\r\n            }\r\n        }\r\n    }\r\n\r\n    InsertionSort=()=>{\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        const {AnimationSpeed} = this.state;\r\n        for(let i =0; i < animations.length; i++){\r\n            const ArrayBars = document.getElementsByClassName(\"bar\");\r\n            if(animations[i].length === 3){\r\n                const color = animations[i][2];\r\n                const barOneId = animations[i][0];\r\n                const barTwoId = animations[i][1];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                const barTwoStyle = ArrayBars[barTwoId].style; \r\n                setTimeout(()=>{\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i*AnimationSpeed);\r\n            }\r\n            else if(typeof animations[i][1] === \"string\"){\r\n                const color = animations[i][1];\r\n                const barOneId = animations[i][0];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                setTimeout(()=>{\r\n                    barOneStyle.backgroundColor = color;\r\n                },i*AnimationSpeed);\r\n            } \r\n            else{\r\n                const[barOneId, height] = animations[i];\r\n                const barOneStyle = ArrayBars[barOneId].style;\r\n                setTimeout(()=>{\r\n                    barOneStyle.height = `${height}px`;\r\n                },i*AnimationSpeed);\r\n            } \r\n        }\r\n    } \r\n\r\n    // Disable buttons after sort click and re-enable the buttons after animation complete (in progress)\r\n    // handleDisable(){\r\n    //     let buttons = document.getElementsByClassName(\"buttons\");\r\n    //     while(buttons.length > 0){\r\n    //         buttons[0].className = \"DisabledButton\";\r\n    //     }\r\n    // }\r\n    // handleEnable(){\r\n    //     let buttons = document.getElementsByClassName(\"DisabledButton\");\r\n    //     while(buttons.length > 0){\r\n    //         buttons[0].className = \"buttons\";\r\n    //     }\r\n    // }\r\n\r\n    arraysAreEqual(a1,a2){\r\n        if(a1.length !== a2.length) return false;\r\n        for(let i = 0;i < a1.length; i++){\r\n            if(a1[i] !== a2[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getRandomVal(){\r\n        return Math.floor(Math.random()*(700-50)) + 50;\r\n    }\r\n    \r\n    render() {\r\n        const { array } = this.state;\r\n        const { barWidth } = this.state;\r\n        return (\r\n       <div>     \r\n        <div className=\"toolbar\" variant = \"dark\" expand = \"lg\">\r\n        <span className = \"title\">Sorting Visualizer</span>\r\n        <span className = \"SliderText\">Change Array Size</span>\r\n            <input  className = \"Slider\" id =\"sizeSlider\" type = \"range\"  min = {5} max={150} defaultValue = {50} onChange = {this.handleIncrease} onClick = {this.handleIncrease}></input>\r\n            <button className =  \"buttons\" onClick = {this.generateArray}>Generate Array</button>\r\n            <button className =  \"buttons\" onClick = {this.bubbleSort}>Bubble Sort</button>\r\n            <button className =  \"buttons\" onClick = {this.mergeSort}>Merge Sort</button>\r\n            <button className =  \"buttons\" onClick = {this.quickSort}>Quick Sort</button>\r\n            <button className =  \"buttons\" onClick= {this.InsertionSort}>Insertion Sort</button>   \r\n        </div>\r\n            <div className = \"array-container\">\r\n              {array.map((value,id)=>(\r\n              <div \r\n              className = \"bar\"\r\n              key = {id}\r\n              style = {{height: `${value}px`, width: `${barWidth}px`}}\r\n              >\r\n              </div>))}\r\n            </div>\r\n        </div>    \r\n        );\r\n    }\r\n}\r\n \r\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './sortingVisualizer/sortingVisualizer';\nfunction App() {\n   return (\n    <div className=\"App\">\n      <SortingVisualizer ></SortingVisualizer>\n    </div>\n    ); \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}